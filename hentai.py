# meta developer: rain

from .. import loader, utils
from telethon.tl.types import Message
from telethon import Button
from PIL import Image
import aiohttp
import requests
from io import BytesIO

class hentai:
    def parse_tags(raw: str):
        return [t.strip().lower() for t in raw.replace(",", " ").split() if t.strip()]

    async def find_image(tags):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://api.nekosapi.com/v4/images/random",
                    params={"rating": "explicit", "tags": ",".join(tags), "limit": 1},
                ) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if isinstance(data, list) and data:
                            image_info = data[0]
                            url = image_info.get("url")
                            tags = image_info.get("tags", [])
                            if url.endswith(".webp"):
                                img_resp = requests.get(url)
                                image = Image.open(BytesIO(img_resp.content)).convert("RGBA")
                                png_image = BytesIO()
                                png_image.name = "image.png"
                                image.save(png_image, format="PNG")
                                png_image.seek(0)
                                return png_image, tags
                            return url, tags
        except Exception as e:
            print(f"[nekosapi error] {e}")
        return None

@loader.tds
class HentaiMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ–Ω—Ç–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    strings = {
        "name": "HentaiMod",
        "lang": "EN",
        "looking_for": "üîç Searching for an image by tags:",
        "no_tags": "‚ùóÔ∏è Provide at least one tag. Example: `.hentai pussy`",
        "not_found": "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–≥–∞–º",
        "more": "üîÅ More",
        "tags": "Tags:"
    }

    strings_ru = {
        "lang": "RU",
        "looking_for": "üîç –ò—â—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–≥–∞–º:",
        "no_tags": "‚ùóÔ∏è –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥. –ü—Ä–∏–º–µ—Ä: `.hentai pussy`",
        "not_found": "‚ö†Ô∏è Nothing found by tags",
        "more": "üîÅ –ï—â—ë",
        "tags": "–¢–µ–≥–∏:"
    }

    # i parsed 10k posts to extract them all (nekosapi sorry for server load)
    genres_en = [
        "anal",
        "beach",
        "bikini",
        "black_hair",
        "blonde_hair",
        "blue_hair",
        "boy",
        "brown_hair",
        "bunny_girl",
        "catgirl",
        "dick",
        "dress",
        "exposed_anus",
        "exposed_girl_breasts",
        "flat_chest",
        "flowers",
        "futanari",
        "girl",
        "glasses",
        "gloves",
        "guitar",
        "horsegirl",
        "ice_cream",
        "kemonomimi",
        "kissing",
        "large_breasts",
        "maid",
        "masturbating",
        "medium_breasts",
        "mountain",
        "night",
        "pink_hair",
        "plants",
        "purple_hair",
        "pussy",
        "rain",
        "reading",
        "red_hair",
        "school_uniform",
        "shorts",
        "skirt",
        "small_breasts",
        "sportswear",
        "sunny",
        "sword",
        "threesome",
        "tree",
        "usagimimi",
        "weapon",
        "wet",
        "white_hair",
        "yuri"
    ]
    genres_ru = [
        "RU",
        "–∞–Ω–∞–ª",
        "–ø–ª—è–∂",
        "–±–∏–∫–∏–Ω–∏",
        "—á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã",
        "—Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã",
        "–≥–æ–ª—É–±—ã–µ –≤–æ–ª–æ—Å—ã",
        "–ø–∞—Ä–µ–Ω—å",
        "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ –≤–æ–ª–æ—Å—ã",
        "–¥–µ–≤—É—à–∫–∞-–∫—Ä–æ–ª–∏–∫",
        "–¥–µ–≤—É—à–∫–∞-–∫–æ—à–∫–∞",
        "–ø–µ–Ω–∏—Å",
        "–æ–¥–µ–∂–¥–∞",
        "–æ–±–Ω–∞–∂–µ–Ω–Ω—ã–π –∞–Ω—É—Å",
        "–æ–±–Ω–∞–∂–µ–Ω–Ω–∞—è –∂–µ–Ω—Å–∫–∞—è –≥—Ä—É–¥—å",
        "–ø–ª–æ—Å–∫–∞—è –≥—Ä—É–¥—å",
        "—Ü–≤–µ—Ç—ã",
        "–≥–µ—Ä–º–∞—Ñ—Ä–æ–¥–∏—Ç",
        "–¥–µ–≤—É—à–∫–∞",
        "–æ—á–∫–∏",
        "–ø–µ—Ä—á–∞—Ç–∫–∏",
        "–≥–∏—Ç–∞—Ä–∞",
        "–¥–µ–≤—É—à–∫–∞-–ª–æ—à–∞–¥—å",
        "–º–æ—Ä–æ–∂–µ–Ω–æ–µ",
        "–∫–µ–º–æ–Ω–æ–º–∏–º–∏",
        "–ø–æ—Ü–µ–ª—É–π",
        "–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "—Å–ª—É–∂–∞–Ω–∫–∞",
        "–º–∞—Å—Ç—É—Ä–±–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "—Å—Ä–µ–¥–Ω—è—è –≥—Ä—É–¥—å",
        "–≥–æ—Ä–∞",
        "–Ω–æ—á—å",
        "—Ä–æ–∑–æ–≤—ã–µ –≤–æ–ª–æ—Å—ã",
        "—Ä–∞—Å—Ç–µ–Ω–∏—è",
        "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –≤–æ–ª–æ—Å—ã",
        "–∫–∏—Å–∫–∞",
        "–¥–æ–∂–¥—å",
        "—á—Ç–µ–Ω–∏–µ",
        "–∫—Ä–∞—Å–Ω—ã–µ –≤–æ–ª–æ—Å—ã",
        "—à–∫–æ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞",
        "—à–æ—Ä—Ç—ã",
        "—é–±–∫–∞",
        "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞",
        "—Å–æ–ª–Ω–µ—á–Ω–æ",
        "–º–µ—á",
        "—Ç—Ä–æ–π–∫–∞",
        "–¥–µ—Ä–µ–≤–æ",
        "—É—Å–∞–≥–∏–º–∏–º–∏",
        "–æ—Ä—É–∂–∏–µ",
        "–º–æ–∫—Ä–æ–µ —Ç–µ–ª–æ",
        "–±–µ–ª—ã–µ –≤–æ–ª–æ—Å—ã",
        "—é—Ä–∏"
    ]
    
    def translate_tags(self, tags):
        lang = self.strings("lang")
        
        translated = []
        for tag in tags:
            search_tag = tag.replace('_', ' ')
            
            if lang == "RU":
                try:
                    index = genres_en.index(search_tag.lower())
                    translated_tag = genres_ru[index]
                except ValueError:
                    translated_tag = search_tag
            else:
                translated_tag = search_tag
            
            translated.append(f"`{translated_tag}`")
        
        return ', '.join(translated)

    @loader.command(
        ru_doc = "<—Ç–µ–≥1> [—Ç–µ–≥2] [...] ‚Äî –ù–∞–π—Ç–∏ hentai –ø–æ —Ç–µ–≥–∞–º",
        en_doc = "<tag1> [tag2] [...] ‚Äî Find hentai by tags",
    )
    async def hentai(self, message: Message):
        raw_tags = utils.get_args_raw(message).strip()
        if not raw_tags:
            await message.edit(self.strings("no_tags"), parse_mode="md")
            return

        tags = hentai.parse_tags(raw_tags)
        await message.edit(f"{self.strings('looking_for')} `{', '.join(tags)}`...", parse_mode="md")

        image_data = await hentai.find_image(tags)
        if not image_data:
            await message.edit(f"{self.strings('not_found')} `{', '.join(tags)}`.", parse_mode="md")
            return

        img_file, found_tags = image_data
        tags_str = self.translate_tags(found_tags)
        btns = [[Button.inline(self.strings("more"), data="hentai:" + ",".join(tags))]]

        await message.client.send_file(
            message.chat_id,
            img_file,
            caption=f"**{self.strings('tags')}:** {tags_str}",
            reply_to=message.reply_to_msg_id,
            parse_mode="md",
            buttons=btns
        )
        await message.delete()

    async def inline__hentai(self, call, args):
        if not args:
            await call.answer(self.strings("not_found"), alert=True)
            return

        tags = args[0].split(",")
        image_data = await hentai.find_image(tags)
        if not image_data:
            await call.answer(self.strings("not_found"), alert=True)
            return

        img_file, found_tags = image_data
        tags_str = self.translate_tags(found_tags)
        btns = [[Button.inline(self.strings("more"), data="hentai:" + ",".join(tags))]]

        await call.edit(
            file=img_file,
            text=f"**{self.strings('tags')}:** {tags_str}",
            parse_mode="md",
            buttons=btns
        )
